#!/bin/bash

GIT_TIMEOUT=${GIT_TIMEOUT:-0}
function git_retry {
    local count=0
    local timeout=0

    if [[ -n "${GIT_TIMEOUT}" ]]; then
        timeout=${GIT_TIMEOUT}
    fi

    until timeout -s SIGINT ${timeout} git "$@"; do
        count=$(($count + 1))
        echo "timeout ${count} for git call: [git $@]"
        if [ $count -eq 3 ]; then
            echo "Maximum of 3 git retries reached"
            return 1
        fi
        sleep 1
    done
}

function repo_lines() {
CACHE_FILE=/tmp/stackrc_cache
wget -q -O $CACHE_FILE https://raw.github.com/openstack-dev/devstack/master/stackrc
cat $CACHE_FILE | grep -e '=\${[A-Z0-9_]*_REPO:-'
}

function non_git_repos() {
    repo_lines | grep -v GIT_BASE | grep -v "//github.com/"
}

function git_repos() {
    repo_lines | grep -e '\(GIT_BASE\|//github.com/\)'
}

function extract_bash_default() {
    sed -e 's/.*:-\(.*\)}$/\1/g'
}

function extract_var_user_repo() {
    sed -e 's,^.*=\${\(.*\):-.*/\(.*\)/\(.*\)}$,\1 \2 \3,g'
}

function generate_repos() {
    {
        {
            git_repos | extract_var_user_repo
            echo "DEVSTACK_REPO openstack-dev devstack.git"
        } | extract_var_user_repo | sed 's/$/ github/'
        non_git_repos | extract_var_user_repo | sed 's/$/ anongit/'
    } | sort | sed -e '/^BM_IMAGE_BUILD_REPO.*$/d'
}

function static_repos() {
cat <<EOF
AUTOMATON_REPO openstack automaton.git github
CEILOMETERMIDDLEWARE_REPO openstack ceilometermiddleware.git github
CINDERCLIENT_REPO openstack python-cinderclient.git github
CINDER_REPO openstack cinder.git github
CLIFF_REPO openstack cliff.git github
DEBTCOLLECTOR_REPO openstack debtcollector.git github
DEVSTACK_REPO openstack-dev devstack.git github
DIB_REPO openstack diskimage-builder.git github
DIB_UTILS_REPO openstack dib-utils.git github
FUTURIST_REPO openstack futurist.git github
GLANCECLIENT_REPO openstack python-glanceclient.git github
GLANCE_REPO openstack glance.git github
GLANCE_STORE_REPO openstack glance_store.git github
HEAT_CFNTOOLS_REPO openstack heat-cfntools.git github
HEATCLIENT_REPO openstack python-heatclient.git github
HEAT_REPO openstack heat.git github
HEAT_TEMPLATES_REPO openstack heat-templates.git github
HORIZONAUTH_REPO openstack django_openstack_auth.git github
HORIZON_REPO openstack horizon.git github
IRONICCLIENT_REPO openstack python-ironicclient.git github
IRONIC_LIB_REPO openstack ironic-lib.git github
IRONIC_PYTHON_AGENT_REPO openstack ironic-python-agent.git github
KEYSTONEAUTH_REPO openstack keystoneauth.git github
KEYSTONECLIENT_REPO openstack python-keystoneclient.git github
KEYSTONEMIDDLEWARE_REPO openstack keystonemiddleware.git github
KEYSTONE_REPO openstack keystone.git github
NEUTRONCLIENT_REPO openstack python-neutronclient.git github
NEUTRON_FWAAS_REPO openstack neutron-fwaas.git github
NEUTRON_LBAAS_REPO openstack neutron-lbaas.git github
NEUTRON_LIB_REPO openstack neutron-lib.git github
NEUTRON_REPO openstack neutron.git github
NOVACLIENT_REPO openstack python-novaclient.git github
NOVA_REPO openstack nova.git github
NOVNC_REPO kanaka noVNC.git github
OAC_REPO openstack os-apply-config.git github
OCC_REPO openstack os-collect-config.git github
OPENSTACKCLIENT_REPO openstack python-openstackclient.git github
ORC_REPO openstack os-refresh-config.git github
OS_BRICK_REPO openstack os-brick.git github
OSLOCACHE_REPO openstack oslo.cache.git github
OSLOCFG_REPO openstack oslo.config.git github
OSLOCON_REPO openstack oslo.concurrency.git github
OSLOCTX_REPO openstack oslo.context.git github
OSLODB_REPO openstack oslo.db.git github
OSLOI18N_REPO openstack oslo.i18n.git github
OSLOLOG_REPO openstack oslo.log.git github
OSLOMID_REPO openstack oslo.middleware.git github
OSLOMSG_REPO openstack oslo.messaging.git github
OSLOPOLICY_REPO openstack oslo.policy.git github
OSLOPRIVSEP_REPO openstack oslo.privsep.git github
OSLOREPORTS_REPO openstack oslo.reports.git github
OSLORWRAP_REPO openstack oslo.rootwrap.git github
OSLOSERIALIZATION_REPO openstack oslo.serialization.git github
OSLOSERVICE_REPO openstack oslo.service.git github
OSLOUTILS_REPO openstack oslo.utils.git github
OSLOVERSIONEDOBJECTS_REPO openstack oslo.versionedobjects.git github
OSLOVMWARE_REPO openstack oslo.vmware.git github
OSPROFILER_REPO openstack osprofiler.git github
OS_VIF_REPO openstack os-vif.git github
PBR_REPO openstack-dev pbr.git github
PYCADF_REPO openstack pycadf.git github
REQUIREMENTS_REPO openstack requirements.git github
SPICE_REPO spice spice-html5.git anongit
STEVEDORE_REPO openstack stevedore.git github
SWIFT3_REPO openstack swift3.git github
SWIFTCLIENT_REPO openstack python-swiftclient.git github
SWIFT_REPO openstack swift.git github
TASKFLOW_REPO openstack taskflow.git github
TEMPEST_REPO openstack tempest.git github
TOOZ_REPO openstack tooz.git github
EOF
}

function assert_no_new_repos() {
diff -u \
    <(generate_repos) \
    <(static_repos)
}

function dst_repo() {
    local repo

    repo="$1"

    local reponame

    reponame=$(echo "$repo" | cut -d" " -f 3)

    echo "git://gold.eng.hq.xensource.com/git/internal/builds/$reponame"
}

function public_repo() {
    local repo

    repo="$1"
    push="${2:-True}"

    local reponame

    reponame=$(echo "$repo" | cut -d" " -f 3)

    if [ "$push" == "True" ]; then
	echo "git@github.com:citrix-openstack-build/$reponame"
    else
	echo "https://github.com/citrix-openstack-build/$reponame"
    fi
}

function source_repo() {
    local repo

    repo="$1"

    local varname
    local username
    local reponame
    local provider

    varname=$(echo "$repo" | cut -d" " -f 1)
    username=$(echo "$repo" | cut -d" " -f 2)
    reponame=$(echo "$repo" | cut -d" " -f 3)
    provider=$(echo "$repo" | cut -d" " -f 4)

    echo "git://gold.eng.hq.xensource.com/git/$provider/$username/$reponame"
}

function var_name() {
    local repo

    repo="$1"

    local varname

    varname=$(echo "$repo" | cut -d" " -f 1)

    echo "$varname"
}

function branch_name() {
    local repo

    repo="$1"

    local varname

    varname=$(var_name "$repo")

    echo "$varname" | sed -e 's/_REPO/_BRANCH/g'
}

function repo_name() {
    local repo

    repo="$1"

    local reponame

    reponame=$(echo "$repo" | cut -d" " -f 3)

    echo "$reponame"
}

function repo_full_name() {
    local repo

    repo="$1"

    local reponame

    reponame=$(echo "$repo" | cut -d" " -f 3)
    repouser=$(echo "$repo" | cut -d" " -f 2)

    echo "$repouser/$reponame"
}

function init_non_existing_repos() {
    local repo
    local varname

    static_repos | while read repo; do
        varname=$(var_name "$repo")
        [ -d "$varname" ] || git init "$varname"
    done
}

function add_build_remote() {
    local repo
    local varname

    static_repos | while read repo; do
        varname=$(var_name "$repo")
        (
            cd "$varname"
            if ! git remote -v | grep -q "^build"; then
                git remote add build $(dst_repo "$repo")
            fi
        )
    done
}

function add_public_remote() {
    local repo
    local varname

    static_repos | while read repo; do
        varname=$(var_name "$repo")
        (
            cd "$varname"
            if git remote -v | grep -q "^public"; then
                echo "Removed public remote"
                git remote rm public
            fi
            echo "Add public remote"
            git remote add public $(public_repo "$repo")
        )
    done
}

function add_origin_remote() {
    local repo
    local varname

    static_repos | while read repo; do
        varname=$(var_name "$repo")
        (
            cd "$varname"
            if ! git remote -v | grep -q "^origin"; then
                git remote add origin $(source_repo "$repo")
            fi
        )
    done
}

function with_all_repos() {
    local args
    local repo
    local varname

    args="$@"

    static_repos | while read repo; do
        varname=$(var_name "$repo")
        (
            cd "$varname"
            echo "$varname: Running $@"
            $@
        )
    done
}

function with_some_repos() {
    local args
    local repo
    local varname

    local action_repos

    action_repos="$1"
    shift

    args="$@"

    static_repos | while read repo; do
	full_name=$(repo_full_name "$repo")
        repo_actioned=0
	for repo_test in $action_repos; do
            if [ "X${repo_test}.gitX" != "X${full_name}X" ]; then
		continue
	    fi
            if [ $repo_actioned -eq 1 ]; then
		continue
	    fi
            varname=$(var_name "$repo")
            (
                cd "$varname"
                echo "$varname: Running $@"
                $@
            )
            repo_actioned=1
        done
    done
}

function reset_repos() {
    local args
    local repo
    local varname

    static_repos | while read repo; do
        varname=$(var_name "$repo")
        (
            cd "$varname"
            git reset --hard || true > /dev/null 2>&1
        )
    done
}

function create_local_build_branch() {
    local branch
    local repo
    local varname

    branch="$1"

    static_repos | while read repo; do
        varname=$(var_name "$repo")
        [ -d "$varname" ] || git_retry clone $(source_repo "$repo") "$varname"
        (
            set -e
            cd "$varname"

            git_retry fetch -q origin || true # Ignore fetch errors
            git_retry checkout --quiet origin/master -B "$branch"
            if ! git remote -v | grep -q "^build"; then
                git remote add build $(dst_repo "$repo")
            fi
        )
    done
}

function print_updated_repos() {
    local branch1
    local branch2

    branch1="$1"
    branch2="$2"

    local reponame
    local varname

    static_repos | while read repo; do
        varname=$(var_name "$repo")
        reponame=$(repo_name "$repo")

        cd "$varname"
        if ! git diff --quiet "$branch1" "$branch2"; then
            echo "$reponame"
        fi
        cd ..
    done
}

function clone_status_repo() {
    local srcrepo
    local ldir

    srcrepo="$1"
    ldir="$2"


if ! [ -d "$ldir" ]; then
    git_retry clone "$srcrepo" "$ldir"
fi
}

function pull_status_repo() {
    local ldir

    ldir="$1"

    (
        cd "$ldir"
        git_retry pull
    )
}

function write_latest_branch() {
    local ldir

    ldir="$1"

    cat > "$ldir/latest_branch"
}

function read_latest_branch() {
    local ldir

    ldir="$1"

    cat "$ldir/latest_branch"
}

function push_status_repo() {
    local ldir

    ldir="$1"

    (
        cd "$ldir"
        git commit -am "Automatic update"
        git_retry push
    )
}
